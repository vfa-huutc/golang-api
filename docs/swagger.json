{
    "swagger": "2.0",
    "info": {
        "title": "Golang CMS API",
        "description": "API documentation for Golang CMS",
        "version": "1.0.0"
    },
    "host": "localhost:3000",
    "basePath": "/api/v1",
    "schemes": [
        "http",
        "https"
    ],
    "paths": {
        "/healthz": {
            "get": {
                "summary": "Health Check",
                "description": "Returns the health status of the API",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "type": "string",
                                    "example": "ok"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "summary": "User login",
                "description": "Authenticate a user and return JWT token",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Login credentials",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "required": [
                                "email",
                                "password"
                            ],
                            "properties": {
                                "email": {
                                    "type": "string",
                                    "example": "user@example.com"
                                },
                                "password": {
                                    "type": "string",
                                    "example": "password123"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "token": {
                                    "type": "string"
                                },
                                "refreshToken": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid credentials"
                    }
                }
            }
        },
        "/refresh-token": {
            "post": {
                "summary": "Refresh authentication token",
                "description": "Get a new JWT token using a refresh token",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "refreshToken": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token refreshed successfully"
                    },
                    "401": {
                        "description": "Invalid refresh token"
                    }
                }
            }
        },
        "/users": {
            "post": {
                "summary": "Create a new user",
                "description": "Creates a new user in the system",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "User details",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "email": {
                                    "type": "string"
                                },
                                "password": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully"
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}